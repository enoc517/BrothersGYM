// <auto-generated />
using System;
using BrothersGYM.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BrothersGYM.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BrothersGYM.Models.Actividad", b =>
                {
                    b.Property<int>("Idactividad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDActividad");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idactividad"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Idactividad");

                    b.ToTable("Actividad", (string)null);
                });

            modelBuilder.Entity("BrothersGYM.Models.CategoriaMembresium", b =>
                {
                    b.Property<int>("IdcategoriaMembresia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCategoriaMembresia");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdcategoriaMembresia"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double>("Precio")
                        .HasColumnType("float");

                    b.HasKey("IdcategoriaMembresia");

                    b.ToTable("CategoriaMembresia");
                });

            modelBuilder.Entity("BrothersGYM.Models.CategoriaProducto", b =>
                {
                    b.Property<int>("IdcategoriaProducto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCategoriaProducto");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdcategoriaProducto"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdcategoriaProducto");

                    b.ToTable("CategoriaProducto", (string)null);
                });

            modelBuilder.Entity("BrothersGYM.Models.Clase", b =>
                {
                    b.Property<int>("Idclase")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDClase");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idclase"));

                    b.Property<int>("Capacidad")
                        .HasColumnType("int");

                    b.Property<DateTime>("DiayHora")
                        .HasColumnType("smalldatetime");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("HoraFin")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("Idactividad")
                        .HasColumnType("int")
                        .HasColumnName("IDActividad");

                    b.Property<int>("Idempleado")
                        .HasColumnType("int")
                        .HasColumnName("IDEmpleado");

                    b.Property<int>("Idsala")
                        .HasColumnType("int")
                        .HasColumnName("IDSala");

                    b.HasKey("Idclase");

                    b.HasIndex("Idactividad");

                    b.HasIndex("Idempleado");

                    b.HasIndex("Idsala");

                    b.ToTable("Clase", (string)null);
                });

            modelBuilder.Entity("BrothersGYM.Models.Cliente", b =>
                {
                    b.Property<int>("Idcliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCliente");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcliente"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Cedula")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateOnly>("FechaNacimiento")
                        .HasColumnType("date");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Idcliente");

                    b.ToTable("Cliente", (string)null);
                });

            modelBuilder.Entity("BrothersGYM.Models.ClienteMembresium", b =>
                {
                    b.Property<int>("IdclienteMembresia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDClienteMembresia");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdclienteMembresia"));

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("FechaRenovacion")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("IdcategoriaMembresia")
                        .HasColumnType("int")
                        .HasColumnName("IDCategoriaMembresia");

                    b.Property<int>("Idcliente")
                        .HasColumnType("int")
                        .HasColumnName("IDCliente");

                    b.HasKey("IdclienteMembresia");

                    b.HasIndex("IdcategoriaMembresia");

                    b.HasIndex("Idcliente");

                    b.ToTable("ClienteMembresia");
                });

            modelBuilder.Entity("BrothersGYM.Models.ClienteSesione", b =>
                {
                    b.Property<int>("IdclienteSesiones")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDClienteSesiones");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdclienteSesiones"));

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaCita")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("Idsesiones")
                        .HasColumnType("int")
                        .HasColumnName("IDSesiones");

                    b.HasKey("IdclienteSesiones");

                    b.HasIndex("Idsesiones");

                    b.ToTable("ClienteSesiones");
                });

            modelBuilder.Entity("BrothersGYM.Models.Departamento", b =>
                {
                    b.Property<int>("Iddepartamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDDepartamento");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Iddepartamento"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Iddepartamento");

                    b.ToTable("Departamento", (string)null);
                });

            modelBuilder.Entity("BrothersGYM.Models.DetallePedido", b =>
                {
                    b.Property<int>("IddetalleProducto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDDetalleProducto");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IddetalleProducto"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("Idpedido")
                        .HasColumnType("int")
                        .HasColumnName("IDPedido");

                    b.Property<int>("Idproducto")
                        .HasColumnType("int")
                        .HasColumnName("IDProducto");

                    b.Property<decimal>("PrecioUnidad")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("IddetalleProducto")
                        .HasName("PK_DetalleProducto");

                    b.HasIndex("Idpedido");

                    b.HasIndex("Idproducto");

                    b.ToTable("DetallePedido", (string)null);
                });

            modelBuilder.Entity("BrothersGYM.Models.Empleado", b =>
                {
                    b.Property<int>("Idempleado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDEmpleado");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idempleado"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Cedula")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CuentaBancaria")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("FechaContratacion")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("Idpuesto")
                        .HasColumnType("int")
                        .HasColumnName("IDPuesto");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NumeroSeguroSocial")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RetencionCcss")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("RetencionCCSS");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Idempleado");

                    b.HasIndex("Idpuesto");

                    b.ToTable("Empleado", (string)null);
                });

            modelBuilder.Entity("BrothersGYM.Models.FacturaPedido", b =>
                {
                    b.Property<int>("IdfacturaPedido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDFacturaPedido");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdfacturaPedido"));

                    b.Property<DateTime>("FechaEmision")
                        .HasColumnType("datetime");

                    b.Property<int>("Idpedido")
                        .HasColumnType("int")
                        .HasColumnName("IDPedido");

                    b.Property<int>("Idproducto")
                        .HasColumnType("int")
                        .HasColumnName("IDProducto");

                    b.Property<int>("Idproveedor")
                        .HasColumnType("int")
                        .HasColumnName("IDProveedor");

                    b.Property<decimal>("Iva")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("IVA");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("IdfacturaPedido");

                    b.HasIndex("Idpedido");

                    b.HasIndex("Idproducto");

                    b.HasIndex("Idproveedor");

                    b.ToTable("FacturaPedido", (string)null);
                });

            modelBuilder.Entity("BrothersGYM.Models.HistorialPago", b =>
                {
                    b.Property<int>("IdhistorialPago")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDHistorialPago");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdhistorialPago"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Idjornada")
                        .HasColumnType("int")
                        .HasColumnName("IDJornada");

                    b.HasKey("IdhistorialPago");

                    b.HasIndex("Idjornada");

                    b.ToTable("HistorialPago", (string)null);
                });

            modelBuilder.Entity("BrothersGYM.Models.Jornadum", b =>
                {
                    b.Property<int>("Idjornada")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDJornada");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idjornada"));

                    b.Property<DateTime>("DiaHoraEntrada")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("DiaHoraSalida")
                        .HasColumnType("smalldatetime");

                    b.Property<decimal>("HorasTrabajadas")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("Idempleado")
                        .HasColumnType("int")
                        .HasColumnName("IDEmpleado");

                    b.Property<decimal>("SalarioBruto")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Idjornada");

                    b.HasIndex("Idempleado");

                    b.ToTable("Jornada");
                });

            modelBuilder.Entity("BrothersGYM.Models.Matricula", b =>
                {
                    b.Property<int>("Idmartricula")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDMartricula");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idmartricula"));

                    b.Property<int>("Idclase")
                        .HasColumnType("int")
                        .HasColumnName("IDClase");

                    b.Property<int>("Idcliente")
                        .HasColumnType("int")
                        .HasColumnName("IDCliente");

                    b.HasKey("Idmartricula");

                    b.HasIndex("Idclase");

                    b.HasIndex("Idcliente");

                    b.ToTable("Matricula", (string)null);
                });

            modelBuilder.Entity("BrothersGYM.Models.PaquteSesione", b =>
                {
                    b.Property<int>("PaqueteSesioensId")
                        .HasColumnType("int");

                    b.Property<int?>("Cantidad")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PaqueteSesioensId");

                    b.ToTable("PaquteSesiones");
                });

            modelBuilder.Entity("BrothersGYM.Models.Pedido", b =>
                {
                    b.Property<int>("Idpedido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDPedido");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idpedido"));

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateOnly>("FechaEntregaAprox")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaPedido")
                        .HasColumnType("date");

                    b.Property<int>("Idempleado")
                        .HasColumnType("int")
                        .HasColumnName("IDEmpleado");

                    b.HasKey("Idpedido");

                    b.HasIndex("Idempleado");

                    b.ToTable("Pedido", (string)null);
                });

            modelBuilder.Entity("BrothersGYM.Models.Producto", b =>
                {
                    b.Property<int>("Idproducto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDProducto");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idproducto"));

                    b.Property<int>("CantidadUnidad")
                        .HasColumnType("int");

                    b.Property<int>("Espera")
                        .HasColumnType("int");

                    b.Property<int>("Existentes")
                        .HasColumnType("int");

                    b.Property<int>("IdcategoriaProducto")
                        .HasColumnType("int")
                        .HasColumnName("IDCategoriaProducto");

                    b.Property<int>("Idproveedores")
                        .HasColumnType("int")
                        .HasColumnName("IDProveedores");

                    b.Property<string>("Imagen")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("PrecioUnidad")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Idproducto");

                    b.HasIndex("IdcategoriaProducto");

                    b.HasIndex("Idproveedores");

                    b.ToTable("Producto", (string)null);
                });

            modelBuilder.Entity("BrothersGYM.Models.Proveedor", b =>
                {
                    b.Property<int>("Idproveedores")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDProveedores");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idproveedores"));

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Idproveedores");

                    b.ToTable("Proveedor", (string)null);
                });

            modelBuilder.Entity("BrothersGYM.Models.Puesto", b =>
                {
                    b.Property<int>("Idpuesto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDPuesto");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idpuesto"));

                    b.Property<int>("Iddepartamento")
                        .HasColumnType("int")
                        .HasColumnName("IDDepartamento");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("PagHora")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Idpuesto");

                    b.HasIndex("Iddepartamento");

                    b.ToTable("Puesto", (string)null);
                });

            modelBuilder.Entity("BrothersGYM.Models.Sala", b =>
                {
                    b.Property<int>("Idsala")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDSala");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idsala"));

                    b.Property<int>("Cupo")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Idsala");

                    b.ToTable("Sala", (string)null);
                });

            modelBuilder.Entity("BrothersGYM.Models.SesionesRayosUv", b =>
                {
                    b.Property<int>("Idsesiones")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDSesiones");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idsesiones"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("Idcliente")
                        .HasColumnType("int")
                        .HasColumnName("IDCliente");

                    b.Property<int>("PaqueteSesionesId")
                        .HasColumnType("int")
                        .HasColumnName("PaqueteSesionesID");

                    b.HasKey("Idsesiones");

                    b.HasIndex("Idcliente");

                    b.HasIndex("PaqueteSesionesId");

                    b.ToTable("SesionesRayosUv", (string)null);
                });

            modelBuilder.Entity("BrothersGYM.Models.Ventum", b =>
                {
                    b.Property<int>("Idventa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDVenta");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idventa"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("Idcliente")
                        .HasColumnType("int")
                        .HasColumnName("IDCliente");

                    b.Property<int>("Idempleado")
                        .HasColumnType("int")
                        .HasColumnName("IDEmpleado");

                    b.Property<int>("Idproducto")
                        .HasColumnType("int")
                        .HasColumnName("IDProducto");

                    b.Property<decimal>("Pago")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Idventa");

                    b.HasIndex("Idcliente");

                    b.HasIndex("Idempleado");

                    b.HasIndex("Idproducto");

                    b.ToTable("Venta");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BrothersGYM.Models.Clase", b =>
                {
                    b.HasOne("BrothersGYM.Models.Actividad", "IdactividadNavigation")
                        .WithMany("Clases")
                        .HasForeignKey("Idactividad")
                        .IsRequired()
                        .HasConstraintName("FK_Clase_Actividad");

                    b.HasOne("BrothersGYM.Models.Empleado", "IdempleadoNavigation")
                        .WithMany("Clases")
                        .HasForeignKey("Idempleado")
                        .IsRequired()
                        .HasConstraintName("FK_Clase_Empleado");

                    b.HasOne("BrothersGYM.Models.Sala", "IdsalaNavigation")
                        .WithMany("Clases")
                        .HasForeignKey("Idsala")
                        .IsRequired()
                        .HasConstraintName("FK_Clase_Sala");

                    b.Navigation("IdactividadNavigation");

                    b.Navigation("IdempleadoNavigation");

                    b.Navigation("IdsalaNavigation");
                });

            modelBuilder.Entity("BrothersGYM.Models.ClienteMembresium", b =>
                {
                    b.HasOne("BrothersGYM.Models.CategoriaMembresium", "IdcategoriaMembresiaNavigation")
                        .WithMany("ClienteMembresia")
                        .HasForeignKey("IdcategoriaMembresia")
                        .IsRequired()
                        .HasConstraintName("FK_ClienteMembresia_CategoriaMembresia");

                    b.HasOne("BrothersGYM.Models.Cliente", "IdclienteNavigation")
                        .WithMany("ClienteMembresia")
                        .HasForeignKey("Idcliente")
                        .IsRequired()
                        .HasConstraintName("FK_ClienteMembresia_Cliente");

                    b.Navigation("IdcategoriaMembresiaNavigation");

                    b.Navigation("IdclienteNavigation");
                });

            modelBuilder.Entity("BrothersGYM.Models.ClienteSesione", b =>
                {
                    b.HasOne("BrothersGYM.Models.SesionesRayosUv", "IdsesionesNavigation")
                        .WithMany("ClienteSesiones")
                        .HasForeignKey("Idsesiones")
                        .IsRequired()
                        .HasConstraintName("FK_ClienteSesiones_SesionesRayosUv");

                    b.Navigation("IdsesionesNavigation");
                });

            modelBuilder.Entity("BrothersGYM.Models.DetallePedido", b =>
                {
                    b.HasOne("BrothersGYM.Models.Pedido", "IdpedidoNavigation")
                        .WithMany("DetallePedidos")
                        .HasForeignKey("Idpedido")
                        .IsRequired()
                        .HasConstraintName("FK_DetalleProducto_Pedido");

                    b.HasOne("BrothersGYM.Models.Producto", "IdproductoNavigation")
                        .WithMany("DetallePedidos")
                        .HasForeignKey("Idproducto")
                        .IsRequired()
                        .HasConstraintName("FK_DetalleProducto_Producto");

                    b.Navigation("IdpedidoNavigation");

                    b.Navigation("IdproductoNavigation");
                });

            modelBuilder.Entity("BrothersGYM.Models.Empleado", b =>
                {
                    b.HasOne("BrothersGYM.Models.Puesto", "IdpuestoNavigation")
                        .WithMany("Empleados")
                        .HasForeignKey("Idpuesto")
                        .IsRequired()
                        .HasConstraintName("FK_Empleado_Puesto");

                    b.Navigation("IdpuestoNavigation");
                });

            modelBuilder.Entity("BrothersGYM.Models.FacturaPedido", b =>
                {
                    b.HasOne("BrothersGYM.Models.Pedido", "IdpedidoNavigation")
                        .WithMany("FacturaPedidos")
                        .HasForeignKey("Idpedido")
                        .IsRequired()
                        .HasConstraintName("FK_FacturaPedido_Pedido");

                    b.HasOne("BrothersGYM.Models.Producto", "IdproductoNavigation")
                        .WithMany("FacturaPedidos")
                        .HasForeignKey("Idproducto")
                        .IsRequired()
                        .HasConstraintName("FK_FacturaPedido_Producto");

                    b.HasOne("BrothersGYM.Models.Proveedor", "IdproveedorNavigation")
                        .WithMany("FacturaPedidos")
                        .HasForeignKey("Idproveedor")
                        .IsRequired()
                        .HasConstraintName("FK_FacturaPedido_Proveedor");

                    b.Navigation("IdpedidoNavigation");

                    b.Navigation("IdproductoNavigation");

                    b.Navigation("IdproveedorNavigation");
                });

            modelBuilder.Entity("BrothersGYM.Models.HistorialPago", b =>
                {
                    b.HasOne("BrothersGYM.Models.Jornadum", "IdjornadaNavigation")
                        .WithMany("HistorialPagos")
                        .HasForeignKey("Idjornada")
                        .IsRequired()
                        .HasConstraintName("FK_HistorialPago_Jornada");

                    b.Navigation("IdjornadaNavigation");
                });

            modelBuilder.Entity("BrothersGYM.Models.Jornadum", b =>
                {
                    b.HasOne("BrothersGYM.Models.Empleado", "IdempleadoNavigation")
                        .WithMany("Jornada")
                        .HasForeignKey("Idempleado")
                        .IsRequired()
                        .HasConstraintName("FK_Jornada_Empleado");

                    b.Navigation("IdempleadoNavigation");
                });

            modelBuilder.Entity("BrothersGYM.Models.Matricula", b =>
                {
                    b.HasOne("BrothersGYM.Models.Clase", "IdclaseNavigation")
                        .WithMany("Matriculas")
                        .HasForeignKey("Idclase")
                        .IsRequired()
                        .HasConstraintName("FK_Matricula_Clase");

                    b.HasOne("BrothersGYM.Models.Cliente", "IdclienteNavigation")
                        .WithMany("Matriculas")
                        .HasForeignKey("Idcliente")
                        .IsRequired()
                        .HasConstraintName("FK_Matricula_Cliente");

                    b.Navigation("IdclaseNavigation");

                    b.Navigation("IdclienteNavigation");
                });

            modelBuilder.Entity("BrothersGYM.Models.Pedido", b =>
                {
                    b.HasOne("BrothersGYM.Models.Empleado", "IdempleadoNavigation")
                        .WithMany("Pedidos")
                        .HasForeignKey("Idempleado")
                        .IsRequired()
                        .HasConstraintName("FK_Pedido_Empleado");

                    b.Navigation("IdempleadoNavigation");
                });

            modelBuilder.Entity("BrothersGYM.Models.Producto", b =>
                {
                    b.HasOne("BrothersGYM.Models.CategoriaProducto", "IdcategoriaProductoNavigation")
                        .WithMany("Productos")
                        .HasForeignKey("IdcategoriaProducto")
                        .IsRequired()
                        .HasConstraintName("FK_Producto_CategoriaProducto");

                    b.HasOne("BrothersGYM.Models.Proveedor", "IdproveedoresNavigation")
                        .WithMany("Productos")
                        .HasForeignKey("Idproveedores")
                        .IsRequired()
                        .HasConstraintName("FK_Producto_Proveedor");

                    b.Navigation("IdcategoriaProductoNavigation");

                    b.Navigation("IdproveedoresNavigation");
                });

            modelBuilder.Entity("BrothersGYM.Models.Puesto", b =>
                {
                    b.HasOne("BrothersGYM.Models.Departamento", "IddepartamentoNavigation")
                        .WithMany("Puestos")
                        .HasForeignKey("Iddepartamento")
                        .IsRequired()
                        .HasConstraintName("FK_Puesto_Departamento");

                    b.Navigation("IddepartamentoNavigation");
                });

            modelBuilder.Entity("BrothersGYM.Models.SesionesRayosUv", b =>
                {
                    b.HasOne("BrothersGYM.Models.Cliente", "IdclienteNavigation")
                        .WithMany("SesionesRayosUvs")
                        .HasForeignKey("Idcliente")
                        .HasConstraintName("FK_SesionesRayosUv_Cliente");

                    b.HasOne("BrothersGYM.Models.PaquteSesione", "PaqueteSesiones")
                        .WithMany("SesionesRayosUvs")
                        .HasForeignKey("PaqueteSesionesId")
                        .IsRequired()
                        .HasConstraintName("FK_SesionesRayosUv_PaquteSesiones");

                    b.Navigation("IdclienteNavigation");

                    b.Navigation("PaqueteSesiones");
                });

            modelBuilder.Entity("BrothersGYM.Models.Ventum", b =>
                {
                    b.HasOne("BrothersGYM.Models.Cliente", "IdclienteNavigation")
                        .WithMany("Venta")
                        .HasForeignKey("Idcliente")
                        .IsRequired()
                        .HasConstraintName("FK_Venta_Cliente");

                    b.HasOne("BrothersGYM.Models.Empleado", "IdempleadoNavigation")
                        .WithMany("Venta")
                        .HasForeignKey("Idempleado")
                        .IsRequired()
                        .HasConstraintName("FK_Venta_Empleado");

                    b.HasOne("BrothersGYM.Models.Producto", "IdproductoNavigation")
                        .WithMany("Venta")
                        .HasForeignKey("Idproducto")
                        .IsRequired()
                        .HasConstraintName("FK_Venta_Producto");

                    b.Navigation("IdclienteNavigation");

                    b.Navigation("IdempleadoNavigation");

                    b.Navigation("IdproductoNavigation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BrothersGYM.Models.Actividad", b =>
                {
                    b.Navigation("Clases");
                });

            modelBuilder.Entity("BrothersGYM.Models.CategoriaMembresium", b =>
                {
                    b.Navigation("ClienteMembresia");
                });

            modelBuilder.Entity("BrothersGYM.Models.CategoriaProducto", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("BrothersGYM.Models.Clase", b =>
                {
                    b.Navigation("Matriculas");
                });

            modelBuilder.Entity("BrothersGYM.Models.Cliente", b =>
                {
                    b.Navigation("ClienteMembresia");

                    b.Navigation("Matriculas");

                    b.Navigation("SesionesRayosUvs");

                    b.Navigation("Venta");
                });

            modelBuilder.Entity("BrothersGYM.Models.Departamento", b =>
                {
                    b.Navigation("Puestos");
                });

            modelBuilder.Entity("BrothersGYM.Models.Empleado", b =>
                {
                    b.Navigation("Clases");

                    b.Navigation("Jornada");

                    b.Navigation("Pedidos");

                    b.Navigation("Venta");
                });

            modelBuilder.Entity("BrothersGYM.Models.Jornadum", b =>
                {
                    b.Navigation("HistorialPagos");
                });

            modelBuilder.Entity("BrothersGYM.Models.PaquteSesione", b =>
                {
                    b.Navigation("SesionesRayosUvs");
                });

            modelBuilder.Entity("BrothersGYM.Models.Pedido", b =>
                {
                    b.Navigation("DetallePedidos");

                    b.Navigation("FacturaPedidos");
                });

            modelBuilder.Entity("BrothersGYM.Models.Producto", b =>
                {
                    b.Navigation("DetallePedidos");

                    b.Navigation("FacturaPedidos");

                    b.Navigation("Venta");
                });

            modelBuilder.Entity("BrothersGYM.Models.Proveedor", b =>
                {
                    b.Navigation("FacturaPedidos");

                    b.Navigation("Productos");
                });

            modelBuilder.Entity("BrothersGYM.Models.Puesto", b =>
                {
                    b.Navigation("Empleados");
                });

            modelBuilder.Entity("BrothersGYM.Models.Sala", b =>
                {
                    b.Navigation("Clases");
                });

            modelBuilder.Entity("BrothersGYM.Models.SesionesRayosUv", b =>
                {
                    b.Navigation("ClienteSesiones");
                });
#pragma warning restore 612, 618
        }
    }
}
